# tools.py - LangChain Tools –¥–ª—è —Ñ–∏—Ç–Ω–µ—Å-–±–æ—Ç–∞

import re
from typing import Optional, Dict, Any
from langchain.tools import tool

from agent import call_ai
from database import (
    create_user_if_not_exists,
    get_user_data,
    get_today_calories,
    save_user_weight,
    save_meal_entry,
    save_goal,
)

# -------------------- In-memory pending --------------------
PENDING: dict[int, dict] = {}


# -------------------- –£—Ç–∏–ª–∏—Ç—ã --------------------

def _extract_qty(text: str) -> dict:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–≥/–º–ª/—à—Ç) –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    t = (text or "").lower()
    grams = None
    ml = None
    pcs = None

    m = re.search(r"(\d+(?:[.,]\d+)?)\s*(?:–≥|–≥—Ä|–≥—Ä–∞–º|–≥—Ä–∞–º–º)\b", t)
    if m:
        grams = float(m.group(1).replace(",", "."))

    m = re.search(r"(\d+(?:[.,]\d+)?)\s*(?:–º–ª|–º–∏–ª–ª–∏–ª–∏—Ç—Ä[–∞-—è]*)\b", t)
    if m:
        ml = float(m.group(1).replace(",", "."))

    m = re.search(r"(\d+(?:[.,]\d+)?)\s*(?:—à—Ç|—à—Ç—É–∫|–∫—É—Å(?:–æ–∫|–∫–∞)|—è–π—Ü[–∞–æ]?)\b", t)
    if m:
        pcs = float(m.group(1).replace(",", "."))

    # —Å–ª–æ–≤–µ—Å–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è —è–∏—Ü
    words = {"–æ–¥–Ω–æ":1,"–æ–¥–∏–Ω":1,"–æ–¥–Ω–∞":1,"–¥–≤–µ":2,"–¥–≤–∞":2,"—Ç—Ä–∏":3,"—á–µ—Ç—ã—Ä–µ":4,"–ø—è—Ç—å":5,
             "—à–µ—Å—Ç—å":6,"—Å–µ–º—å":7,"–≤–æ—Å–µ–º—å":8,"–¥–µ–≤—è—Ç—å":9,"–¥–µ—Å—è—Ç—å":10}
    for w, n in words.items():
        if re.search(rf"\b{w}\b.*\b—è–π—Ü", t):
            pcs = float(n)
            break

    return {"grams": grams, "ml": ml, "pcs": pcs}


# -------------------- AI-–æ—Ü–µ–Ω–∫–∞ –∫–∞–ª–æ—Ä–∏–π --------------------

def ai_estimate_calories(user_id: int, meal_description: str) -> Optional[int]:
    """
    –ü—Ä–æ—Å–∏–º LLM –≤–µ—Ä–Ω—É—Ç—å –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–∫–∫–∞–ª). –£—á–∏—Ç—ã–≤–∞–µ—Ç –≥/–º–ª/—à—Ç. –§–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.
    """
    q = _extract_qty(meal_description)
    system = (
        "–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚Äî –æ–±—â–∏–µ –∫–∏–ª–æ–∫–∞–ª–æ—Ä–∏–∏ –±–ª—é–¥–∞.\n"
        "–ï—Å–ª–∏ –±–ª—é–¥–æ –Ω–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω–æ–µ (–æ–≤–æ—â–∏, –Ω–µ—Å–ª–∞–¥–∫–∏–µ —Ñ—Ä—É–∫—Ç—ã, –≤–æ–¥–∞/—á–∞–π/–∫–æ—Ñ–µ –±–µ–∑ —Å–∞—Ö–∞—Ä–∞), –Ω–µ –ø—Ä–µ–≤—ã—à–∞–π 50 –∫–∫–∞–ª/100 –≥.\n"
        "–°–ª–∞–¥–æ—Å—Ç–∏/–º–∞—Å–ª–∞/–æ—Ä–µ—Ö–∏/–∂–∞—Ä–µ–Ω–æ–µ/—Ö–ª–µ–± –æ–±—ã—á–Ω–æ 250‚Äì700 –∫–∫–∞–ª/100 –≥.\n"
        "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ ‚Äî –æ—Ü–µ–Ω–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ. –û—Ç–≤–µ—Ç ‚Äî –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ —Å–ª–æ–≤."
    )
    user = (
        f"–ë–ª—é–¥–æ: {meal_description}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: –≥—Ä–∞–º–º—ã={q.get('grams')}, –º–ª={q.get('ml')}, —à—Ç—É–∫–∏={q.get('pcs')}\n"
        "–û—Ç–≤–µ—Ç: –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–∫–∫–∞–ª)."
    )
    try:
        print(f"[AI-KCAL‚Üí] uid={user_id} {meal_description}")
        resp = call_ai(user_id, user, system=system, temperature=0)
        txt = (resp or {}).get("response", "") if isinstance(resp, dict) else str(resp)
        print(f"[AI-KCAL‚Üê] {txt}")

        m = re.search(r"(-?\d+)", txt)
        if not m:
            return None
        val = int(m.group(1))

        # –º—è–≥–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã
        if val < 5:
            val = 5
        if val > 1200:
            val = 1200
        return val

    except Exception as e:
        print(f"[AI-KCAL ERR] {e}")
        return None


# ==================== LangChain Tools ====================

@tool
def log_meal_tool(user_id: int, description: str) -> str:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–∏—ë–º –ø–∏—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞–ª–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ AI.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        description: –û–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: "2 —è–π—Ü–∞", "–±–æ—Ä—â 300 –º–ª", "—Ö–∞–ª–≤–∞ 40 –≥")
    
    Returns:
        –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∫–∞–ª–æ—Ä–∏–π –∑–∞ –¥–µ–Ω—å
    """
    return log_meal(user_id, description)

@tool  
def get_remaining_calories_tool(user_id: int) -> str:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –∫–∞–ª–æ—Ä–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        
    Returns:
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã—Ö –∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–∞–ª–æ—Ä–∏–π
    """
    return get_remaining_calories(user_id)

@tool
def log_weight_tool(user_id: int, weight: float) -> str:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        weight: –í–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö
        
    Returns:
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—Å–∞
    """
    return log_weight_entry(user_id, weight)

@tool
def create_plan_tool(user_id: int, goal_text: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω –ø–æ—Ö—É–¥–µ–Ω–∏—è —Å —Ü–µ–ª–µ–≤—ã–º –≤–µ—Å–æ–º. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é –ø–ª–∞–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        goal_text: –û–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—Ü–µ–ª—å 75", "–Ω–∞ 10 –∫–≥ –∑–∞ 12 –Ω–µ–¥–µ–ª—å", "–ø–æ—Ö—É–¥–µ—Ç—å –Ω–∞ 7 –∫–≥ –∑–∞ 2 –º–µ—Å—è—Ü–∞")
        
    Returns:
        –ü—Ä–µ–≤—å—é –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è —Å –∫–∞–ª–æ—Ä–∏—è–º–∏ –∏ –º–∞–∫—Ä–æ—Å–∞–º–∏
    """
    return create_weight_loss_plan(user_id, goal_text)

@tool
def generate_workout_tool(user_id: int, preferences: str = "") -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        preferences: –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "60 –º–∏–Ω—É—Ç", "–∫–∞—Ä–¥–∏–æ", "–¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö")
        
    Returns:
        –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —Ä–∞–∑–º–∏–Ω–∫–æ–π, –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç—å—é –∏ –∑–∞–º–∏–Ω–∫–æ–π
    """
    return generate_workout(user_id, preferences)

@tool
def show_progress_tool(user_id: int) -> str:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–µ—Å—É.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        
    Returns:
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –≤–µ—Å–µ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    """
    return analyze_progress(user_id)

@tool
def show_weight_tool(user_id: int) -> str:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        
    Returns:
        –¢–µ–∫—É—â–∏–π –≤–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    return show_current_weight(user_id)

@tool
def show_goal_tool(user_id: int) -> str:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        
    Returns:
        –¢–µ–∫—É—â–∞—è –¥–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º
    """
    return show_current_goal(user_id)


# ==================== –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ====================

def log_meal(user_id: int, description: str, assistant_hint: str = "", meal_type: str = "generic") -> str:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–∏—ë–º –ø–∏—â–∏, –∫–∞–ª–æ—Ä–∏–∏ —Å—á–∏—Ç–∞–µ—Ç AI."""
    create_user_if_not_exists(user_id)
    clean = (description or "").strip().lower()

    kcals = ai_estimate_calories(user_id, clean)
    if kcals is None:
        kcals = 150  # —Ñ–æ–ª–±—ç–∫

    save_meal_entry(user_id, clean, kcals)

    data = get_user_data(user_id) or {}
    goal = int(data.get("goal_calories") or 2000)
    eaten = int(get_today_calories(user_id) or 0)
    remaining = max(goal - eaten, 0)

    return (
        f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {clean}\n"
        f"üìä –ö–∞–ª–æ—Ä–∏–∏: ~{kcals} –∫–∫–∞–ª\n"
        f"üìà –°–µ–≥–æ–¥–Ω—è: ~{eaten}/{goal} –∫–∫–∞–ª. –û—Å—Ç–∞—Ç–æ–∫: ~{remaining} –∫–∫–∞–ª"
    )

def get_remaining_calories(user_id: int) -> str:
    data = get_user_data(user_id) or {}
    goal = int(data.get("goal_calories") or 2000)
    eaten = int(get_today_calories(user_id) or 0)
    remaining = max(goal - eaten, 0)
    used_pct = int(eaten / goal * 100) if goal else 0
    return (
        f"üìä –°–µ–≥–æ–¥–Ω—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: ~{eaten} –∫–∫–∞–ª\n"
        f"üìà –û—Å—Ç–∞—Ç–æ–∫: ~{remaining} –∫–∫–∞–ª –∏–∑ {goal}\n"
        f"üíØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used_pct}%"
    )


# -------------------- –í–µ—Å / –ü—Ä–æ–≥—Ä–µ—Å—Å --------------------

def update_weight(user_id: int, text: str) -> str:
    nums = re.findall(r"\d+(?:[.,]\d+)?", text or "")
    if not nums:
        return "–ù–µ –≤–∏–∂—É —á–∏—Å–ª–∞ –≤–µ—Å–∞."
    w = float(nums[0].replace(",", "."))
    save_user_weight(user_id, w)
    return f"üíæ –í–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {w:.1f} –∫–≥"

def log_weight_entry(user_id: int, weight: float) -> str:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–µ—Å –ø–æ —á–∏—Å–ª—É."""
    try:
        w = float(str(weight).replace(",", "."))
    except Exception:
        return "–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–µ—Å."
    save_user_weight(user_id, w)
    return f"üíæ –í–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {w:.1f} –∫–≥"

def analyze_progress(user_id: int) -> str:
    data = get_user_data(user_id) or {}
    w = data.get("weight")
    if w is None:
        return "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É."
    return f"–¢–µ–∫—É—â–∏–π –≤–µ—Å: {float(w):.1f} –∫–≥"

def show_current_weight(user_id: int) -> str:
    data = get_user_data(user_id) or {}
    w = data.get("weight")
    if w is None:
        return "–ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é. –û—Ç–ø—Ä–∞–≤—å: ¬´–≤–∑–≤–µ—Å–∏–ª—Å—è 88¬ª."
    return f"–¢–µ–∫—É—â–∏–π –≤–µ—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ: {float(w):.1f} –∫–≥"

def show_current_goal(user_id: int) -> str:
    data = get_user_data(user_id) or {}
    goal_cals = int(data.get("goal_calories") or 0)
    if goal_cals <= 0:
        return "–¶–µ–ª—å –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
    return f"–¢–µ–∫—É—â–∏–π –¥–Ω–µ–≤–Ω–æ–π –∫–∞–ª–æ—Ä–∞–∂: {goal_cals} –∫–∫–∞–ª/–¥–µ–Ω—å"


# -------------------- –ü–ª–∞–Ω / –¶–µ–ª—å --------------------

def _word_to_int_ru(word: str) -> Optional[int]:
    m = {
        "–æ–¥–∏–Ω": 1, "–æ–¥–Ω–∞": 1, "–æ–¥–Ω–æ": 1,
        "–¥–≤–∞": 2, "–¥–≤–µ": 2,
        "—Ç—Ä–∏": 3, "—á–µ—Ç—ã—Ä–µ": 4, "–ø—è—Ç—å": 5, "—à–µ—Å—Ç—å": 6,
        "—Å–µ–º—å": 7, "–≤–æ—Å–µ–º—å": 8, "–¥–µ–≤—è—Ç—å": 9, "–¥–µ—Å—è—Ç—å": 10,
        "–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å": 12,
    }
    return m.get((word or "").strip().lower())

def _extract_plan_request(text: str, current: float) -> dict:
    """–ü–æ–Ω–∏–º–∞–µ—Ç: ¬´—Ü–µ–ª—å 75¬ª, ¬´–Ω–∞ 7 –∫–≥¬ª, ¬´–∑–∞ 12 –Ω–µ–¥–µ–ª—å/3 –º–µ—Å—è—Ü–∞¬ª, ¬´1 –∫–≥ –≤ –Ω–µ–¥–µ–ª—é¬ª."""
    t = (text or "").lower()

    # —Å–∫–æ—Ä–æ—Å—Ç—å (–∫–≥/–Ω–µ–¥)
    speed_kg_week = None
    m_speed = re.search(r"(\d+(?:[.,]\d+)?)\s*–∫–≥[^–∞-—è0-9]{0,5}–≤[^–∞-—è0-9]{0,5}–Ω–µ–¥", t)
    if m_speed:
        speed_kg_week = float(m_speed.group(1).replace(",", "."))

    # —Å—Ä–æ–∫
    weeks_hint = None
    m_weeks = re.search(r"–∑–∞\s*(\d+)\s*–Ω–µ–¥", t)
    if m_weeks:
        weeks_hint = int(m_weeks.group(1))
    m_months_word = re.search(r"–∑–∞\s*([–ê-–Ø–∞-—è]+)\s*–º–µ—Å—è—Ü", t)
    if weeks_hint is None and m_months_word:
        w = _word_to_int_ru(m_months_word.group(1))
        if w:
            weeks_hint = w * 4
    m_months_num = re.search(r"–∑–∞\s*(\d+)\s*–º–µ—Å—è—Ü", t)
    if weeks_hint is None and m_months_num:
        weeks_hint = int(m_months_num.group(1)) * 4

    # –∞–±—Å–æ–ª—é—Ç–Ω–∞—è —Ü–µ–ª—å
    goal_abs = None
    if "—Ü–µ–ª—å" in t:
        m_abs = re.search(r"—Ü–µ–ª—å[^0-9]*(\d+(?:[.,]\d+)?)", t)
        if m_abs:
            goal_abs = float(m_abs.group(1).replace(",", "."))
    if goal_abs is None:
        m_abs2 = re.search(r"(?<!–Ω–∞\s)(\d+(?:[.,]\d+)?)\s*–∫–≥", t)
        if m_abs2 and "–Ω–∞ " not in t:
            goal_abs = float(m_abs2.group(1).replace(",", "."))

    # –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —Ü–µ–ª—å ¬´–Ω–∞ X –∫–≥¬ª
    goal_rel = None
    m_rel = re.search(r"–Ω–∞\s*(\d+(?:[.,]\d+)?)\s*–∫–≥", t)
    if m_rel:
        goal_rel = float(m_rel.group(1).replace(",", "."))

    # –∏—Ç–æ–≥–æ–≤–∞—è —Ü–µ–ª—å
    if goal_abs is not None:
        goal = goal_abs
    elif goal_rel is not None:
        goal = max(40.0, float(current) - goal_rel)
    else:
        goal = None

    return {"goal": goal, "weeks_hint": weeks_hint, "speed_kg_week": speed_kg_week}

def _calc_simple_plan(current: float, goal: float, weeks_hint: Optional[int] = None,
                      height_cm: Optional[float] = None, age: Optional[int] = None,
                      activity_factor: float = 1.5) -> Dict[str, Any]:
    """
    Mifflin‚ÄìSt Jeor, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç, –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–∏–Ω–∏–º—É–º.
    """
    delta = float(current) - float(goal)
    if delta <= 0:
        weeks = 4
    else:
        weeks = max(1, weeks_hint) if weeks_hint else max(4, int(round(delta / 0.75)))

    h = float(height_cm) if height_cm else 175.0
    a = int(age) if age else 35
    bmr = 10 * float(current) + 6.25 * h - 5 * a + 5
    tdee = bmr * float(activity_factor)

    daily_deficit = (delta / weeks) * 7700.0 / 7.0 if weeks > 0 else 500.0
    daily_deficit = min(daily_deficit, 1000.0)
    daily_cal = int(round(tdee - daily_deficit))

    MIN_KCAL = 1500 if current >= 75 else 1300
    adjusted = False
    if daily_cal < MIN_KCAL and delta > 0:
        adjusted = True
        max_deficit_safe = max(tdee - MIN_KCAL, 300)
        kg_per_week_safe = max_deficit_safe * 7.0 / 7700.0
        if kg_per_week_safe <= 0:
            kg_per_week_safe = 0.3
        weeks = int(max(4, round(delta / kg_per_week_safe)))
        daily_deficit = min((delta / weeks) * 7700.0 / 7.0, 1000.0)
        daily_cal = int(round(max(MIN_KCAL, tdee - daily_deficit)))

    protein = int(round(float(goal) * 2.0))   # 2 –≥/–∫–≥
    fats    = int(round(float(goal) * 0.7))   # 0.7 –≥/–∫–≥
    kc_pf   = protein * 4 + fats * 9
    carbs   = max(int((daily_cal - kc_pf) / 4), 0)

    return {
        "daily_calories": daily_cal,
        "protein": protein,
        "carbs": carbs,
        "fats": fats,
        "weeks": weeks,
        "delta": float(delta),
        "tdee": int(round(tdee)),
        "adjusted": adjusted,
        "min_kcal": MIN_KCAL
    }

def create_weight_loss_plan(user_id: int, text: str = "") -> str:
    """
    –î–µ–ª–∞–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ–≤—å—é-–ø–ª–∞–Ω (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è) –∏ –∫–ª–∞–¥—ë–º –≤ pending.
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Äî ¬´–¥–∞¬ª, –æ—Ç–º–µ–Ω–∞ ‚Äî ¬´–Ω–µ—Ç¬ª.
    """
    data = get_user_data(user_id) or {}
    current = float(data.get("weight") or 0)
    if current <= 0:
        return "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—É—â–∏–π –≤–µ—Å: ¬´–≤–∑–≤–µ—Å–∏–ª—Å—è 88¬ª."

    parsed = _extract_plan_request(text, current)
    goal = parsed["goal"]
    if goal is None or goal >= current:
        return "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ü–µ–ª—å –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞. –ü—Ä–∏–º–µ—Ä: ¬´—Ü–µ–ª—å 75¬ª –∏–ª–∏ ¬´–Ω–∞ 10 –∫–≥ –∑–∞ 12 –Ω–µ–¥–µ–ª—å¬ª."

    if parsed["weeks_hint"]:
        weeks = parsed["weeks_hint"]
    elif parsed["speed_kg_week"]:
        weeks = max(1, int(round((current - goal) / parsed["speed_kg_week"])))
    else:
        weeks = None

    plan = _calc_simple_plan(
        current=current,
        goal=goal,
        weeks_hint=weeks,
        height_cm=data.get("height"),
        age=data.get("age"),
        activity_factor=1.5
    )

    payload = {
        "target_weight": float(goal),
        "daily_calories": int(plan["daily_calories"]),
        "protein": int(plan["protein"]),
        "carbs": int(plan["carbs"]),
        "fats": int(plan["fats"]),
        "weeks": int(plan["weeks"]),
    }
    PENDING[user_id] = {"type": "plan", "payload": payload}

    safety = ""
    if plan["adjusted"]:
        safety = f"\n‚ö†Ô∏è –ö–∞–ª–æ—Ä–∞–∂ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {plan['daily_calories']} –∫–∫–∞–ª (–º–∏–Ω–∏–º—É–º {plan['min_kcal']})."

    return (
        f"üéØ –¶–µ–ª—å: {goal:.1f} –∫–≥ (—Ç–µ–∫—É—â–∏–π {current:.1f} –∫–≥)\n"
        f"üçΩÔ∏è –ö–∞–ª–æ—Ä–∞–∂: ~{plan['daily_calories']} –∫–∫–∞–ª/–¥–µ–Ω—å (TDEE ~{plan['tdee']} –∫–∫–∞–ª)\n"
        f"ü•ó –ú–∞–∫—Ä–æ—Å—ã: –±–µ–ª–∫–∏ {plan['protein']} –≥, —É–≥–ª–µ–≤–æ–¥—ã {plan['carbs']} –≥, –∂–∏—Ä—ã {plan['fats']} –≥\n"
        f"‚è∞ –°—Ä–æ–∫: ~{plan['weeks']} –Ω–µ–¥."
        f"{safety}\n\n"
        "–ü–æ–¥—Ö–æ–¥–∏—Ç? –ù–∞–ø–∏—à–∏: ¬´–¥–∞¬ª ‚Äî –ø—Ä–∏–º–µ–Ω–∏—Ç—å, ¬´–Ω–µ—Ç¬ª ‚Äî –æ—Ç–º–µ–Ω–∞"
    )

def confirm_pending_action(user_id: int) -> str:
    p = PENDING.get(user_id)
    if not p or p.get("type") != "plan":
        return "–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    d = p["payload"]

    save_goal(
        user_id,
        goal_text=f"–¶–µ–ª—å {d['target_weight']:.1f} –∫–≥",
        calories=int(d["daily_calories"]),
        proteins=int(d["protein"]),
        carbs=int(d["carbs"]),
        fats=int(d["fats"]),
        weeks=int(d["weeks"]),
    )
    PENDING.pop(user_id, None)
    return (
        "‚úÖ –ü–ª–∞–Ω –ø—Ä–∏–º–µ–Ω—ë–Ω!\n\n"
        f"üéØ –¶–µ–ª—å: {float(d['target_weight']):.1f} –∫–≥\n"
        f"üçΩÔ∏è –ö–∞–ª–æ—Ä–∞–∂: ~{int(d['daily_calories'])} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
        f"ü•ó –ú–∞–∫—Ä–æ—Å—ã: –±–µ–ª–∫–∏ {int(d['protein'])} –≥, —É–≥–ª–µ–≤–æ–¥—ã {int(d['carbs'])} –≥, –∂–∏—Ä—ã {int(d['fats'])} –≥\n"
        f"‚è∞ –°—Ä–æ–∫: ~{int(d['weeks'])} –Ω–µ–¥."
    )

def cancel_pending_action(user_id: int) -> str:
    if PENDING.pop(user_id, None):
        return "‚ùé –û—Ç–º–µ–Ω–µ–Ω–æ. –ù–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ."
    return "–û—Ç–º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ."


# -------------------- –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ / –ë–æ–ª—Ç–æ–≤–Ω—è --------------------

def generate_workout(user_id: int, text: str = "") -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ LLM."""
    t = (text or "").lower()
    duration = 45
    for d in [90, 75, 60, 45, 30]:
        if re.search(rf"(^|\D){d}(\D|$)", t):
            duration = d
            break

    level = "–Ω–∞—á–∏–Ω–∞—é—â–∏–π"
    if "—Å—Ä–µ–¥–Ω" in t:
        level = "—Å—Ä–µ–¥–Ω–∏–π"
    elif "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç" in t or "–æ–ø—ã—Ç" in t:
        level = "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"

    goal = "–æ–±—â–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞"
    if "–ø–æ—Ö—É–¥" in t:
        goal = "–ø–æ—Ö—É–¥–µ–Ω–∏–µ"
    elif "—Å–∏–ª–∞" in t:
        goal = "–Ω–∞–±–æ—Ä —Å–∏–ª—ã"
    elif "–∫–∞—Ä–¥–∏–æ" in t:
        goal = "–∫–∞—Ä–¥–∏–æ"

    system = "–¢—ã —Ç—Ä–µ–Ω–µ—Ä. –î–∞–π —á—ë—Ç–∫–∏–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: –†–∞–∑–º–∏–Ω–∫–∞/–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å/–ó–∞–º–∏–Ω–∫–∞. –ö–æ—Ä–æ—Ç–∫–æ, –ø—É–Ω–∫—Ç–∞–º–∏, –±–µ–∑ Markdown."
    user = f"–°–æ—Å—Ç–∞–≤—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ {duration} –º–∏–Ω—É—Ç. –£—Ä–æ–≤–µ–Ω—å: {level}. –¶–µ–ª—å: {goal}."
    try:
        resp = call_ai(user_id, user, system=system, temperature=0.2)
        txt = (resp or {}).get("response", "") if isinstance(resp, dict) else str(resp)
        return txt.strip() or _fallback_workout()
    except Exception:
        return _fallback_workout()

def _fallback_workout() -> str:
    return (
        "–†–∞–∑–º–∏–Ω–∫–∞ (5 –º–∏–Ω): –º–∞—Ö–∏ —Ä—É–∫–∞–º–∏, –∫—Ä—É–≥–æ–≤—ã–µ –ø–ª–µ—á–∞–º–∏, –ª—ë–≥–∫–∏–µ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è\n"
        "–û—Å–Ω–æ–≤–Ω–∞—è (35 –º–∏–Ω): –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è 4√ó12, –æ—Ç–∂–∏–º–∞–Ω–∏—è 4√ó10, –ø–ª–∞–Ω–∫–∞ 3√ó40—Å, –≤—ã–ø–∞–¥—ã 3√ó10/–Ω, –ø—Ä–µ—Å—Å 3√ó15\n"
        "–ó–∞–º–∏–Ω–∫–∞ (5 –º–∏–Ω): —Ä–∞—Å—Ç—è–∂–∫–∞ –Ω–æ–≥ –∏ —Å–ø–∏–Ω—ã"
    )

def small_talk(user_id: int, text: str) -> str:
    """–°–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ LLM."""
    try:
        resp = call_ai(user_id, text, system="–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.", temperature=0.3)
        msg = (resp or {}).get("response", "").strip()
        return msg if msg else "–ü–æ–ø—Ä–æ–±—É–π: ¬´—Ü–µ–ª—å 75¬ª, ¬´–≤–∑–≤–µ—Å–∏–ª—Å—è 88¬ª, ¬´—è —Å—ä–µ–ª 2 —è–π—Ü–∞¬ª."
    except Exception:
        return "–ü–æ–ø—Ä–æ–±—É–π: ¬´—Ü–µ–ª—å 75¬ª, ¬´–≤–∑–≤–µ—Å–∏–ª—Å—è 88¬ª, ¬´—è —Å—ä–µ–ª 2 —è–π—Ü–∞¬ª."


# -------------------- –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ --------------------

def propose_weight_loss_plan(user_id: int, text: str = "") -> str:
    """–°—Ç–∞—Ä–æ–µ –∏–º—è ‚Üí –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ."""
    return create_weight_loss_plan(user_id, text)

def propose_plan(user_id: int, text: str = "") -> str:
    """–ê–Ω–∞–ª–æ–≥ —Å—Ç–∞—Ä–æ–≥–æ –∏–º–µ–Ω–∏."""
    return create_weight_loss_plan(user_id, text)


# ==================== –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö LangChain tools –¥–ª—è –∞–≥–µ–Ω—Ç–∞ ====================

def get_all_tools():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö LangChain tools –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∞–≥–µ–Ω—Ç–µ"""
    return [
        log_meal_tool,
        get_remaining_calories_tool,
        log_weight_tool,
        create_plan_tool,
        generate_workout_tool,
        show_progress_tool,
        show_weight_tool,
        show_goal_tool,
    ]